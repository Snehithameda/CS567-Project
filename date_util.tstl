# TSTL script for testing the DateManipulator class

import datetime
import pytz
from dateutil.relativedelta import relativedelta

# Define the DateManipulator class interface
def DateManipulator(date_str, fmt='%Y-%m-%d', timezone='UTC'):
    date = datetime.datetime.strptime(date_str, fmt)
    date = pytz.timezone(timezone).localize(date)
    return date

def add_days(date, days):
    return date + datetime.timedelta(days=days)

def subtract_days(date, days):
    return date - datetime.timedelta(days=days)

def add_months(date, months):
    return date + relativedelta(months=months)

def subtract_months(date, months):
    return date - relativedelta(months=months)

def add_years(date, years):
    return date + relativedelta(years=years)

def subtract_years(date, years):
    return date - relativedelta(years=years)

def get_weekday(date):
    return date.strftime('%A')

def convert_timezone(date, new_timezone):
    new_zone = pytz.timezone(new_timezone)
    return date.astimezone(new_zone)

def format_date(date, new_format):
    return date.strftime(new_format)

def days_until(date, other_date_str):
    other_date = datetime.datetime.strptime(other_date_str, date.strftime('%Y-%m-%d'))
    other_date = pytz.timezone(date.tzinfo.zone).localize(other_date)
    return (other_date - date).days

def days_since(date, other_date_str):
    other_date = datetime.datetime.strptime(other_date_str, date.strftime('%Y-%m-%d'))
    other_date = pytz.timezone(date.tzinfo.zone).localize(other_date)
    return (date - other_date).days

def get_week_number(date):
    return date.strftime('%U')

def calculate_age(date):
    today = datetime.datetime.now(date.tzinfo)
    age = today.year - date.year - ((today.month, today.day) < (date.month, date.day))
    return age

def get_quarter(date):
    quarter = (date.month - 1) // 3 + 1
    return f'Q{quarter}'

def get_time_of_day(date):
    hour = date.hour
    if 5 <= hour < 12:
        return "Morning"
    elif 12 <= hour < 18:
        return "Afternoon"
    elif 18 <= hour < 22:
        return "Evening"
    else:
        return "Night"

def get_iso_week_date(date):
    return date.strftime('%G-W%V-%u')

def is_business_day(date):
    return date.weekday() < 5

def is_working_hours(date):
    return 9 <= date.hour < 17

def get_timezone_abbreviation(date):
    return date.strftime('%Z')

# Define the TSTL test cases
def test_add_days():
    date = DateManipulator('2023-01-01', timezone='UTC')
    return add_days(date, 5)

def test_subtract_days():
    date = DateManipulator('2023-01-10', timezone='UTC')
    return subtract_days(date, 3)

def test_add_months():
    date = DateManipulator('2023-01-01', timezone='UTC')
    return add_months(date, 2)

def test_subtract_months():
    date = DateManipulator('2023-01-10', timezone='UTC')
    return subtract_months(date, 1)

def test_add_years():
    date = DateManipulator('2023-01-01', timezone='UTC')
    return add_years(date, 1)

def test_subtract_years():
    date = DateManipulator('2023-01-10', timezone='UTC')
    return subtract_years(date, 1)

def test_get_weekday():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return get_weekday(date)

def test_convert_timezone():
    date = DateManipulator('2023-01-01', timezone='UTC')
    return convert_timezone(date, 'US/Pacific')

def test_format_date():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return format_date(date, '%B %d, %Y')

def test_days_until():
    date = DateManipulator('2023-01-01', timezone='UTC')
    return days_until(date, '2023-01-10')

def test_days_since():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return days_since(date, '2023-01-10')

def test_get_week_number():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return get_week_number(date)

def test_calculate_age():
    date = DateManipulator('1990-01-01', timezone='UTC')
    return calculate_age(date)

def test_get_quarter():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return get_quarter(date)

def test_get_time_of_day():
    date = DateManipulator('2023-01-15 10:00:00', timezone='UTC')
    return get_time_of_day(date)

def test_get_iso_week_date():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return get_iso_week_date(date)

def test_is_business_day():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return is_business_day(date)

def test_is_working_hours():
    date = DateManipulator('2023-01-15 08:00:00', timezone='UTC')
    return is_working_hours(date)

def test_get_timezone_abbreviation():
    date = DateManipulator('2023-01-15', timezone='UTC')
    return get_timezone_abbreviation(date)
